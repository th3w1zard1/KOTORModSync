# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches:
      - '*'

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest

    env:
      Solution_Name: KOTORModSync
      Test_Project_Path: KOTORModSync.Tests\KOTORModSync.Tests.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Execute unit tests
      run: |
        $date = Get-Date -Format yyyy-MM-dd
        dotnet test --logger "trx;LogFileName=test_results_$date.xml" --results-directory TestResults
      continue-on-error: true

    - name: Summarize test results
      run: |
        dotnet tool install --global trx2junit
        $date = Get-Date -Format yyyy-MM-dd
        trx2junit "TestResults/test_results_$date.xml" --output "TestResults/summary_$date.xml"

    - name: Modify test results XML
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const process = require('process');
          const commitHash = process.env.GITHUB_SHA;
          const date = new Date().toISOString().split('T')[0];
          const filePath = 'TestResults/test_results_' + date + '.xml';
          let xmlContent = fs.readFileSync(filePath, 'utf8');
          xmlContent = xmlContent.replace('<test-run', `<test-run commit-hash="${commitHash}"`);

          fs.writeFileSync(filePath, xmlContent);

    - name: Generate date
      id: generate-date
      run: |
        $date = Get-Date -Format yyyy-MM-dd
        Add-Content $env:GITHUB_OUTPUT ("date=$date")

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: Test Summary
        path: |
          TestResults/summary_${{ steps.generate-date.outputs.date }}.xml
          TestResults/test_results_${{ steps.generate-date.outputs.date }}.xml


